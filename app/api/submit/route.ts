import { NextRequest, NextResponse } from 'next/server'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { name, telegram, remainingLicenses, resetCounter } = body

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
    if (resetCounter === true) {
      console.log('üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π')
      return await resetLicenseCounter()
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞—è–≤–∫–∏
    if (!name || !telegram) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è –∏ Telegram username' },
        { status: 400 }
      )
    }

    console.log('üìù –ü–æ–ª—É—á–µ–Ω–∞ –∑–∞—è–≤–∫–∞:', { name, telegram, remainingLicenses })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Apps Script
    const scriptUrl = 'https://script.google.com/macros/s/AKfycbw7QtPdqu30HEiTO8T93sJzw0VHjA0b2UbJZ45jfXK0TrLQ1RyLoPaJ0KS4M8F3Zg1xlw/exec'
    
    try {
      const response = await fetch(scriptUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name,
          telegram,
          remainingLicenses: remainingLicenses || 200,
          timestamp: new Date().toISOString(),
          userAgent: request.headers.get('user-agent') || 'Unknown'
        })
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const result = await response.json()
      console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç Google Apps Script:', result)

      if (result.success) {
        return NextResponse.json({
          success: true,
          message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
          remainingLicenses: result.remainingLicenses,
          timestamp: new Date().toISOString()
        })
      } else {
        throw new Error(result.message || '–û—à–∏–±–∫–∞ –æ—Ç Google Apps Script')
      }

    } catch (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Apps Script:', fetchError)
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      return NextResponse.json(
        { 
          success: false, 
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Google Sheets',
          error: fetchError instanceof Error ? fetchError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
          details: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Google Apps Script –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã'
        },
        { status: 500 }
      )
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏:', error)
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π
async function resetLicenseCounter() {
  try {
    const scriptUrl = 'https://script.google.com/macros/s/AKfycbw7QtPdqu30HEiTO8T93sJzw0VHjA0b2UbJZ45jfXK0TrLQ1RyLoPaJ0KS4M8F3Zg1xlw/exec'
    
    const response = await fetch(scriptUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        resetCounter: true
      })
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    console.log('‚úÖ –°—á–µ—Ç—á–∏–∫ –ª–∏—Ü–µ–Ω–∑–∏–π —Å–±—Ä–æ—à–µ–Ω:', result)

    if (result.success) {
      return NextResponse.json({
        success: true,
        message: '–°—á–µ—Ç—á–∏–∫ –ª–∏—Ü–µ–Ω–∑–∏–π —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω',
        remainingLicenses: result.remainingLicenses
      })
    } else {
      throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞:', error)
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞ –ª–∏—Ü–µ–Ω–∑–∏–π',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ª–∏—Ü–µ–Ω–∑–∏–π
export async function GET() {
  try {
    const scriptUrl = 'https://script.google.com/macros/s/AKfycbw7QtPdqu30HEiTO8T93sJzw0VHjA0b2UbJZ45jfXK0TrLQ1RyLoPaJ0KS4M8F3Zg1xlw/exec'
    
    const response = await fetch(scriptUrl, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    })

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`)
    }

    const result = await response.json()
    console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ª–∏—Ü–µ–Ω–∑–∏—è—Ö:', result)

    if (result.success) {
      return NextResponse.json({
        success: true,
        remainingLicenses: result.remainingLicenses,
        usedLicenses: result.usedLicenses
      })
    } else {
      throw new Error(result.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö')
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏—Ü–µ–Ω–∑–∏–π:', error)
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ª–∏—Ü–µ–Ω–∑–∏—è—Ö',
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      },
      { status: 500 }
    )
  }
}
